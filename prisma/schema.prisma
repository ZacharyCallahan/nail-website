// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model for customers, admins, and staff
model User {
    id            String        @id @default(cuid())
    name          String?
    email         String        @unique
    password      String?
    phone         String?
    role          UserRole      @default(CUSTOMER)
    emailVerified DateTime?
    image         String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    accounts      Account[]
    sessions      Session[]
    appointments  Appointment[] @relation("CustomerAppointments")
    staffDetails  Staff?
}

enum UserRole {
    CUSTOMER
    STAFF
    ADMIN
}

// Next-Auth models for authentication
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Service model for nail salon services
model Service {
    id            String         @id @default(cuid())
    name          String
    description   String
    duration      Int // in minutes
    price         Decimal        @db.Decimal(10, 2)
    category      String
    imageUrl      String?
    isActive      Boolean        @default(true)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    addOns        AddOn[]
    staffServices StaffService[]
    appointments  Appointment[]
}

// Add-on services that can be added to main services
model AddOn {
    id                String             @id @default(cuid())
    name              String
    description       String
    price             Decimal            @db.Decimal(10, 2)
    serviceId         String
    isActive          Boolean            @default(true)
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    service           Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    appointmentAddOns AppointmentAddOn[]
}

// Staff model for salon employees
model Staff {
    id           String         @id @default(cuid())
    userId       String         @unique
    bio          String?
    imageUrl     String?
    isActive     Boolean        @default(true)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    services     StaffService[]
    schedules    Schedule[]
    appointments Appointment[]  @relation("StaffAppointments")
}

// Junction table to connect staff to services they can perform
model StaffService {
    staffId   String
    serviceId String
    staff     Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
    service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@id([staffId, serviceId])
}

// Schedule model for staff availability
model Schedule {
    id          String   @id @default(cuid())
    staffId     String
    startTime   DateTime
    endTime     DateTime
    dayOfWeek   Int // 0 = Sunday, 1 = Monday, etc.
    isAvailable Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

// Appointment model for customer bookings
model Appointment {
    id            String             @id @default(cuid())
    customerId    String
    staffId       String
    serviceId     String
    startTime     DateTime
    endTime       DateTime
    status        AppointmentStatus  @default(PENDING)
    totalPrice    Decimal            @db.Decimal(10, 2)
    notes         String?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    customer      User               @relation("CustomerAppointments", fields: [customerId], references: [id])
    staff         Staff              @relation("StaffAppointments", fields: [staffId], references: [id])
    service       Service            @relation(fields: [serviceId], references: [id])
    addOns        AppointmentAddOn[]
    notifications Notification[]
    payment       Payment?
}

enum AppointmentStatus {
    PENDING
    CONFIRMED
    CANCELED
    COMPLETED
}

// Junction table to connect appointments to add-ons
model AppointmentAddOn {
    appointmentId String
    addOnId       String
    appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
    addOn         AddOn       @relation(fields: [addOnId], references: [id], onDelete: Cascade)

    @@id([appointmentId, addOnId])
}

// Notification model for emails and SMS
model Notification {
    id            String             @id @default(cuid())
    appointmentId String
    type          NotificationType
    status        NotificationStatus @default(PENDING)
    sentAt        DateTime?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    appointment   Appointment        @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

enum NotificationType {
    EMAIL
    SMS
}

enum NotificationStatus {
    PENDING
    SENT
    FAILED
}

// Payment model for appointment payments
model Payment {
    id              String        @id @default(cuid())
    appointmentId   String        @unique
    amount          Decimal       @db.Decimal(10, 2)
    stripePaymentId String?
    status          PaymentStatus @default(PENDING)
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    appointment     Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}

// Content model for website content management
model Content {
    id        String      @id @default(cuid())
    key       String      @unique // e.g., "hero_title", "about_text"
    value     String      @db.Text
    type      ContentType @default(TEXT)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

enum ContentType {
    TEXT
    HTML
    IMAGE_URL
}

// Settings model for application settings
model Settings {
    id        String   @id @default(cuid())
    key       String   @unique // e.g., "business_hours", "notification_enabled"
    value     String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Testimonial model for customer reviews
model Testimonial {
    id           String   @id @default(cuid())
    customerName String
    rating       Int
    comment      String   @db.Text
    isApproved   Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}
