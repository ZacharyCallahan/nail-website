generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  phone         String?
  role          UserRole      @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  appointments  Appointment[] @relation("CustomerAppointments")
  sessions      Session[]
  staffDetails  Staff?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id            String         @id @default(cuid())
  name          String
  description   String
  duration      Int
  price         Decimal        @db.Decimal(10, 2)
  category      String
  imageUrl      String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  addOns        AddOn[]
  appointments  Appointment[]
  staffServices StaffService[]
}

model AddOn {
  id                String             @id @default(cuid())
  name              String
  description       String
  price             Decimal            @db.Decimal(10, 2)
  serviceId         String
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  service           Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointmentAddOns AppointmentAddOn[]
}

model Staff {
  id           String         @id @default(cuid())
  userId       String         @unique
  bio          String?
  imageUrl     String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  appointments Appointment[]  @relation("StaffAppointments")
  schedules    Schedule[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  services     StaffService[]
}

model StaffService {
  staffId   String
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff     Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@id([staffId, serviceId])
}

model Schedule {
  id           String    @id @default(cuid())
  staffId      String
  startTime    DateTime
  endTime      DateTime
  dayOfWeek    Int? // Null if it's a specific date rather than recurring weekly
  specificDate DateTime? // Null if it's a recurring weekly schedule
  isAvailable  Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  staff        Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Appointment {
  id            String             @id @default(cuid())
  customerId    String
  staffId       String
  serviceId     String
  startTime     DateTime
  endTime       DateTime
  status        AppointmentStatus  @default(PENDING)
  totalPrice    Decimal            @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  customer      User               @relation("CustomerAppointments", fields: [customerId], references: [id])
  service       Service            @relation(fields: [serviceId], references: [id])
  staff         Staff              @relation("StaffAppointments", fields: [staffId], references: [id])
  addOns        AppointmentAddOn[]
  notifications Notification[]
  payment       Payment?
}

model AppointmentAddOn {
  appointmentId String
  addOnId       String
  addOn         AddOn       @relation(fields: [addOnId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@id([appointmentId, addOnId])
}

model Notification {
  id            String             @id @default(cuid())
  appointmentId String
  type          NotificationType
  status        NotificationStatus @default(PENDING)
  sentAt        DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  appointment   Appointment        @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String        @id @default(cuid())
  appointmentId   String        @unique
  amount          Decimal       @db.Decimal(10, 2)
  stripePaymentId String?
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  appointment     Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model Content {
  id        String      @id @default(cuid())
  key       String      @unique
  value     String
  type      ContentType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id           String   @id @default(cuid())
  customerName String
  rating       Int
  comment      String
  isApproved   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum NotificationType {
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ContentType {
  TEXT
  HTML
  IMAGE_URL
}
